Index: tools/ocamlopt/asmcomp/i386/proc.ml
===================================================================
--- tools/ocamlopt/asmcomp/i386/proc.ml	(revision 81)
+++ tools/ocamlopt/asmcomp/i386/proc.ml	(working copy)
@@ -181,7 +181,7 @@
 (* Calling the assembler *)
 
 let assemble_file infile outfile =
-  Ccomp.command ("as --32 -o " ^ Filename.quote outfile ^ " " ^ Filename.quote infile)
+  Ccomp.command ("i386-elf-as --32 -o " ^ Filename.quote outfile ^ " " ^ Filename.quote infile)
 
 open Clflags;;
 open Config;;
Index: tools/ocamlopt/utils/ccomp.ml
===================================================================
--- tools/ocamlopt/utils/ccomp.ml	(revision 81)
+++ tools/ocamlopt/utils/ccomp.ml	(working copy)
@@ -70,7 +70,7 @@
                              quoted_archive (quote_files file_list))
   | _ ->
       let r1 =
-        command(Printf.sprintf "ar rc %s %s"
+        command(Printf.sprintf "i386-elf-ar rc %s %s"
                 quoted_archive (quote_files file_list)) in
       if r1 <> 0 || String.length Config.ranlib = 0
       then r1
Index: tools/ocamlopt/utils/config.ml
===================================================================
--- tools/ocamlopt/utils/config.ml	(revision 81)
+++ tools/ocamlopt/utils/config.ml	(working copy)
@@ -31,12 +31,12 @@
 let bytecomp_c_compiler = "foobar"
 let bytecomp_c_linker = "foobar"
 let bytecomp_c_libraries = "foobar"
-let native_c_compiler = "gcc -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT"
-let native_c_linker = "gcc"
+let native_c_compiler = "fgcc -Wall -D_FILE_OFFSET_BITS=64 -D_REENTRANT"
+let native_c_linker = "fgcc"
 let native_c_libraries = "foobar"
-let native_partial_linker = "ld -r"
-let native_pack_linker = "ld -r"
-let ranlib = "ranlib"
+let native_partial_linker = "fld -r"
+let native_pack_linker = "fld -r"
+let ranlib = "i386-elf-ranlib"
 let cc_profile = "-pg"
 
 let exec_magic_number = "Caml1999X008"
Index: myocamlbuild.ml
===================================================================
--- myocamlbuild.ml	(revision 81)
+++ myocamlbuild.ml	(working copy)
@@ -1,9 +1,9 @@
-
-open Ocamlbuild_plugin;;
-open Command;;
-open Format;;
-open Outcome;;
-
+
+open Ocamlbuild_plugin;;
+open Command;;
+open Format;;
+open Outcome;;
+
 Options.ocamlopt := P"./ocamloptcomp.byte";;
 Options.nostdlib := true;;
 
@@ -32,7 +32,7 @@
 		| Good o -> o
 		| Bad exn -> raise exn
 	end results in
-	Cmd(S[A"ar";A"-rc"; Px a; T(tags_of_pathname a++"c"++"staticlib"); atomize objs]);;
+	Cmd(S[A"i386-elf-ar";A"-rc"; Px a; T(tags_of_pathname a++"c"++"staticlib"); atomize objs]);;
 
 rule "C static library (short)"
 	~prod:"lib%(libname).a"
@@ -52,7 +52,7 @@
 	begin fun env _ ->
 		let s = env "%.S" and o = env "%.o" in
 		let tags = tags_of_pathname s ++ "S" ++ "compile" in
-		Cmd(S[A"gcc"; T(tags); A"-c"; P s; A"-o"; Px o])
+		Cmd(S[A"i386-elf-gcc"; T(tags); A"-c"; P s; A"-o"; Px o])
 	end;;
 
 rule "c -> o"
@@ -60,7 +60,7 @@
 	begin fun env _ ->
 		let c = env "%.c" and o = env "%.o" in
 		let tags = tags_of_pathname c ++ "c" ++ "compile" in
-        Cmd(S [A"gcc"; T(tags); A"-c"; P c; A"-o"; Px o])
+        Cmd(S [A"i386-elf-gcc"; T(tags); A"-c"; P c; A"-o"; Px o])
 	end;;
 
 let copy_rule' ?insert src dst =
@@ -444,7 +444,7 @@
         ~prod:"libgcc.a"
         ~deps:[]
         begin fun _ _ ->
-            Cmd (Sh "cp `gcc -m32 -print-file-name=libgcc.a` libgcc.a")
+            Cmd (Sh "cp `i386-elf-gcc -m32 -print-file-name=libgcc.a` libgcc.a")
         end;;
 
 (*** libkernel.a ***)
@@ -468,8 +468,8 @@
                 (* copy libasmrun.a to libkernel.a... *)
                 cp asmrun kernel;
                 (* add compiled objects to libkernel.a... *)
-                Cmd(S[A"ar";A"-rb"; A"startup.o"; Px kernel; T(tags_of_pathname kernel++"c"++"staticlib"); atomize objs]);
-                Cmd(S[A"ranlib";Px kernel]);
+                Cmd(S[A"i386-elf-ar";A"-rb"; A"startup.o"; Px kernel; T(tags_of_pathname kernel++"c"++"staticlib"); atomize objs]);
+                Cmd(S[A"i386-elf-ranlib";Px kernel]);
             ]
         end;;
 
@@ -493,7 +493,7 @@
             A"-freestanding";
             A"-use-runtime"; P"libkernel.a";
             A"-ccopt"; A"-static";
-            A"-cc"; A"ld";
+            A"-cc"; A"i386-elf-ld";
             A"-ccopt"; A"-L .";
             A"-ccopt"; A"-T ../kernel/kernel.ldscript";
             A"-clibrary"; A"-lgcc";
Index: Makefile
===================================================================
--- Makefile	(revision 81)
+++ Makefile	(working copy)
@@ -11,26 +11,26 @@
 
 all:
 	$(MAKE) -C tools ocaml bitstring
-	$(OCAMLBUILD) libraries/stdlib/stdlib.cmxa libraries/extlib/extlib.cmxa libraries/threads/threads.cmxa libraries/bitstring/bitstring.cmxa $(KERNEL)
+	$(OCAMLBUILD) libraries/stdlib/stdlib.cmxa libraries/extlib/extlib.cmxa libraries/threads/threads.cmxa libraries/bitstring/bitstring.cmxa $(KERNEL)
 	rm -rf cdrom/iso_prep
-	cd _build && find -name '*.o' -or -name '*.a' | sed -e 's/\.\///' > ../file.lst
+	#cd _build && find -name '*.o' -or -name '*.a' | sed -e 's/\.\///' > ../file.lst
 	echo kernel/snowflake.native >> file.lst
 	cd _build && tar cf ../files.tar -T ../file.lst
-	strip -s $(BUILDDIR)/$(KERNEL)
-	mkdir -p cdrom/iso_prep/boot/grub/
-	cp cdrom/stage2_eltorito cdrom/iso_prep/boot/grub/
-	cp $(BUILDDIR)/$(KERNEL) cdrom/iso_prep/boot/snowflake.elf
+	i386-elf-strip -s $(BUILDDIR)/$(KERNEL)
+	mkdir -p cdrom/iso_prep/boot/grub/
+	cp cdrom/stage2_eltorito cdrom/iso_prep/boot/grub/
+	cp $(BUILDDIR)/$(KERNEL) cdrom/iso_prep/boot/snowflake.elf
 	cp cdrom/menu.lst cdrom/iso_prep/boot/grub/
-	cp files.tar cdrom/iso_prep/
-	mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot \
-		-boot-load-size 4 -boot-info-table \
+	cp files.tar cdrom/iso_prep/
+	mkisofs -R -b boot/grub/stage2_eltorito -no-emul-boot \
+		-boot-load-size 4 -boot-info-table \
 		-quiet -o $(ISO) cdrom/iso_prep/
 	rm -f file.lst files.tar
 
-clean:
-	$(OCAMLBUILD) -clean || true
-	rm -f $(ISO)
-	rm -rf cdrom/iso_prep
+clean:
+	$(OCAMLBUILD) -clean || true
+	rm -f $(ISO)
+	rm -rf cdrom/iso_prep
 
 distclean:
 	$(MAKE) -C tools clean
