
open Bigarray
open BitBuffer
open Mp4_alt
open Decoder

let openfile filename =
	let ic = open_in_bin filename in
	let cookie, mdat = Mp4_alt.openfile ic in
	seek_in ic cookie.offset;
	let buffer = String.make cookie.size '\000' in
	really_input ic buffer 0 cookie.size;
	let cookie = Decoder.init (Bitstring.bitstring_of_string buffer) in
	Decoder.print_specific_config cookie;
	(* set up global config *)
	Decoder.config := cookie;
	(* allocate mix buffers *)
	Decoder.mix_buffer_U := Array1.create int32 c_layout (Int32.to_int cookie.frame_length * 4);
	Decoder.mix_buffer_V := Array1.create int32 c_layout (Int32.to_int cookie.frame_length * 4);
	(* allocate dynamic predictor *)
	Decoder.predictor := Array1.create int32 c_layout (Int32.to_int cookie.frame_length * 4);
	(* "shift off" buffer shares memory with predictor buffer *)
	Decoder.shift_buffer := BigarrayUtils.int32_to_uint16 !Decoder.predictor;
	
	(* conversion time... *)
	
	(* set up buffers *)
	let decode_buffer = Array1.create int8_unsigned c_layout (4096 lsl 6) in
	let size = (Int32.to_int cookie.max_frame_bytes) + 1 in
	let buffer = String.make size '\000' in
	let bitbuffer = BitBuffer.create buffer size in
	
	(* write WAVE header *)
	let oc = open_out_bin "pcm.wav" in
	Printf.fprintf oc
		"RIFF****WAVEfmt \x10\x00\x00\x00\x01\x00\x02\x00\x44\xAC\x00\x00\x10\xB1\x02\x00\x04\x00\x10\x00data****";
	
	seek_in ic mdat.offset;
	(* done opening *)

	let frame_length = Int32.to_int cookie.frame_length in
	let chunk_size = frame_length * cookie.num_channels * cookie.bit_depth / 2 in

	let length = mdat.offset + mdat.size - 8 in

	let continue = ref true in
	let ok = ref false in

	let last = ref 0 in

while !continue do

	(* read initial buffer *)
	bitbuffer.current <- 0;
	really_input ic buffer 0 (min size (in_channel_length ic - pos_in ic));

	let decoded = Decoder.decode bitbuffer decode_buffer frame_length cookie.num_channels in
	let ok', decoded = match decoded with `ok n -> true, n | `fail (n,ex) ->
		Printf.eprintf "error decoding: %s\n" (Printexc.to_string ex);
		for i = 0 to 16 do
			Printf.eprintf " %02x" (Char.code buffer.[bitbuffer.current+i]);
		done;
		Printf.eprintf "\n";
		Printf.eprintf "end position = %d\n" (pos_in ic);
		Printf.eprintf "length = %d\n" length;
		Printf.eprintf "previous position = %d\n" !last;
		Printf.eprintf "current = %d\n" bitbuffer.current;
		Printf.eprintf "decoded = %d\n" n;
		Printf.eprintf "size should've decoded = %d\n" (pos_in ic - !last);
		false, n
	in
	ok := ok';
	for i = 0 to (decoded * cookie.num_channels * cookie.bit_depth / 8) - 1 do
		output_byte oc decode_buffer.{i};
	done;
(*	Printf.eprintf "+%!";*)
	(* refill *)
	seek_in ic (pos_in ic - size + bitbuffer.current);
	last := pos_in ic;
	
	continue := (pos_in ic - mdat.offset) < length && ok';
done;
	close_in ic;
	seek_out oc 0x28;
	let len = out_channel_length oc - 44 in
	let s b = Char.chr ((len lsr b) land 0xFF) in
	Printf.fprintf oc "%c%c%c%c"
		(s 0) (s 8) (s 16) (s 24);
	close_out oc

let () = openfile Sys.argv.(1)
